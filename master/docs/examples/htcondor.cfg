
# Sample configuration for Buildbot master.cfg using HTCondor latent slave
# Michael.V.Pelletier@raytheon.com - November 2013

from buildbot.buildslave.htcondor import HTCondorLatentBuildSlave
import random, string

#==========

htcondor = drmaa.Session()
while True:
    try:
        htcondor.initialize()
        break
    except drmaa.errors.AlreadyActiveSessionException:
        print "Restarting " + htcondor.contact + " DRMAA session"
        htcondor.exit()
    except:
        print "Failed to initialize " + htcondor.contact + " DRMAA session"
        htcondor .exit()
        raise

#==========
def _randomword(length):
    """ Return a random alphanumeric string of the specified length """

    return ''.join(random.choice(string.letters + string.digits)
                for i in range(length))
#==========

# Set up 16 buildslaves which could be dispatched to any execute
# node in the HTCondor pool
max_latent_slaves = 16
c['slaves'] = []
slave_list = []
for i in range(1, max_latent_slaves + 1):
    slave_name = 'BuildSlave' + string.zfill(i, 2)
    slave_list.append(slave_name)
    c['slaves'].append(HTCondorLatentBuildSlave(
        slave_setup_cmd='/home/buildbot/libexec/run_buildslave',
        name=slave_name,
        password=_randomword(16),
        max_builds=1,
        build_wait_timeout=0,
        missing_timeout=15*60))

# COMMENTARY
#
# A well-behaved scheduler job uses only one processor at a time
# unless it informs the scheduler otherwise. Hence max_builds
# is set to 1 to insure that the slave runs only one task at a time
# in order to cooperate with the scheduler's expectations and avoid
# wasted compute resources that would occur if the slave requested
# two CPUs and only ran one build.  If you need more simultaneous builds,
# add more buildslaves. Likewise, avoid "make -j 16" in your steps;
# "-j 2" is usually appropriate to best utilize a single processor.

# We can use a random password since it is passed to the buildslave
# starter script as an environment variable which is then used during
# creation of the slave. As long as the name and the random password
# match up, the slave can substantiate. I avoid punctuation in the
# password with an eye to preventing any potential mysterious random
# parsing problems.

# The build_wait_timeout is set to zero so that the master will
# terminate the slave as soon as the build is complete. This prevents
# an idle slave from camping out on a compute resource that could
# be used by the scheduler's other pending jobs.

# In a very busy compute pool, a buildslave job may not dispatch to
# an execute node for some time. The missing_timeout sets a time
# after which the scheduler should consider the attempt to have failed.
# The HTCondor latent slave uses this to set a periodic_remove
# expression so that the waiting job will be automatically deleted
# by the scheduler after this time expires, in case the master does
# not or fails to perform a stop_instance on the slave.

# If you have a busy pool, it's a good idea to use cron to set a low
# HTCondor user priority factor for the buildbot's jobs, and periodically
# reset the buildbot user's accumulated RUP usage, so that buildslaves
# are more likely to be dispatched promptly. You can also consider
# using a rank expression to steer buildbot jobs to preferred machines.
# The Condor ClassAd "BuildslaveJob" will be set to "TRUE" for these jobs,
# to aid in rank and requirements expressions and whatever else.

