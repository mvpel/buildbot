#!/bin/sh
#
# This script is run to start an HTCondor latent build slave, with the first
# argument the slave name from the c['slaves'] list in the master.cfg,
# and creates the slave using the HTCondor scratch directory. It populates
# the info/host and the info/admin files, then runs the slave in no-daemon
# mode.
#
# Michael.V.Pelletier@raytheon.com - October 21, 2013

PATH=/bin:/usr/bin
MASTER="buildbot.yourcompany.com"
ADMIN="Buildbot Admin <buildbot@yourcompany.com>"
UMASK="002"

SLAVE_NAME=$1
if [ -z "$SLAVE_NAME" ] ; then
    echo "$0: must specify slave name as first argument"
    exit -1
fi
if [ -z "$SLAVE_PASSWORD" ] ; then
    echo "$0: slave password must be provided as an env variable"
    exit -1
fi

# Make sure we're a Condor job
if [ -z "$_CONDOR_SCRATCH_DIR" ] ; then
    echo "$0: HTCondor scratch dir not defined; must run as an HTCondor job"
    exit -1
fi
SLAVEDIR="$_CONDOR_SCRATCH_DIR/$SLAVE_NAME"
# Adding the slave name to the path makes it show up in "ps" output

# Trap the signal generated by the DRMAA terminate operation in order
# to shut down the buildslave gracefully. The nativeSpecification
# kill_sig sets the signal which is sent here.
killslave() {
    if [ -n "$SLAVE_PID" ] ; then
        kill -HUP $SLAVE_PID	# buildslave --allow-shutdown=signal

        # If there's a central log file in the buildbot homedir, append
        # the current build's logfile to it.
        if [ -w ~buildbot/log/$SLAVE_NAME.log ] ; then
            sleep 2
            cat $SLAVEDIR/twistd.log >> ~buildbot/log/$SLAVE_NAME.log
        fi

        # If the slave doesn't terminate on the signal, Condor will do it
        wait $SLAVE_PID
    fi
}
trap killslave HUP TERM
# If kill_sig is SIGHUP, a trap here is not necessary unless you want
# to do other things besides terminating the slave, e.g. copying logs,
# since HUP propagates to children. If you do trap, you must signal the
# buildslave yourself.

# Create the slave directory
chgrp --quiet buildbot $_CONDOR_SCRATCH_DIR
if [ $? -eq 0 ] ; then
	chmod --quiet g+rwx $_CONDOR_SCRATCH_DIR
fi
mkdir --mode=770 $SLAVEDIR

if [ ! -d "$SLAVEDIR" ] ; then
    echo "$0: failed to create $SLAVEDIR"
    exit -1
fi

#==================
#==================
# Generate host details for the buildslave's info/host file
kernel_version() {
    echo "Kernel version:" `uname -r`
}

total_memory() {
    echo -n "Total Memory (MB): "
    awk '/^MemTotal:/ {print int($2/1024)}' /proc/meminfo
}

cpu_info() {
    echo -n "CPU: "
    awk '/^model name/ {gsub(/  */," ");print substr($0,index($0,$4));exit}' \
         /proc/cpuinfo
}

lib_info() {
    echo "Library versions:"
    ldconfig -p | egrep '(libc\.|libstdc++)'
}

hostinfo() {
    echo -n "Buildslave:" `hostname` "($SLAVE_NAME) "`lsb_release -sb`
    kernel_version
    total_memory
    lib_info
}

#==================
#==================
# Create the slave in the scratch directory. The --allow-shutdown=signal
# ties to kill_sig=SIGHUP in the nativeSpecification
buildslave create-slave --umask=$UMASK --allow-shutdown=signal $SLAVEDIR \
    $MASTER $SLAVE_NAME $SLAVE_PASSWORD

rv=$?
if [ $rv -ne 0 ] ; then
    echo "$0: failed to create buildslave $SLAVE_NAME for $MASTER in $SLAVEDIR"
    exit $rv
fi

# Populate the info directory and start the slave
if [ -d "$SLAVEDIR/info" ] ; then
    hostinfo > $SLAVEDIR/info/host
    echo $ADMIN > $SLAVEDIR/info/admin
    echo "ssh://"`hostname` > $SLAVEDIR/info/access_uri
fi

# Don't use exec here, otherwise HTCondor thinks the job finished
# because the condor_startd's child (this script) disappeared.
buildslave start --nodaemon $SLAVEDIR &
SLAVE_PID=$!
wait
